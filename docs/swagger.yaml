openapi: 3.0.0
info:
  title: Auth² Service API
  description: |
    # Authentication × Authorization = Auth²
    
    Complete API documentation for the Auth² Service - a comprehensive authentication and authorization system for teaching web API development.
    
    ## Authentication Flow
    1. **Register** a new account (`POST /auth/register`) - Creates a basic user (role 1)
    2. **Login** with credentials (`POST /auth/login`) - Returns JWT token
    3. Include token in `Authorization: Bearer <token>` header for protected endpoints
    4. **Verify** email and phone for full account activation
    
    ## Role Hierarchy
    - **1 - User**: Basic access
    - **2 - Moderator**: User management
    - **3 - Admin**: Full user CRUD, create equal/lower roles
    - **4 - SuperAdmin**: System administration
    - **5 - Owner**: Complete system control
    
    ## Security
    - SHA256 password hashing with unique salts
    - JWT tokens (14-day expiry)
    - Email verification (48-hour tokens)
    - SMS verification (6-digit codes, 15-minute expiry)
    - Role-based access control with hierarchy enforcement

  version: 1.0.0
  contact:
    name: TCSS 460 Support
    email: tcss460professor@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://your-production-url.com
    description: Production server

tags:
  - name: Public Auth
    description: Authentication endpoints (no token required)
  - name: Protected Auth
    description: Authentication endpoints (token required)
  - name: Verification
    description: Email and phone verification
  - name: Admin
    description: Administrative user management (admin role required)
  - name: Testing
    description: Development and testing endpoints

paths:
  # ===== PUBLIC AUTH ENDPOINTS =====
  /auth/register:
    post:
      tags:
        - Public Auth
      summary: Register new user account
      description: |
        Creates a new user account with role 1 (User).
        
        **Validation Rules:**
        - Email must be unique and valid format
        - Username must be unique, 3-50 chars, alphanumeric + underscore/hyphen
        - Password must be 8-128 characters
        - Phone must be at least 10 digits
        
        **Account Status:** New accounts are created with 'pending' status until verified.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              validRegistration:
                summary: Valid registration
                value:
                  firstname: John
                  lastname: Doe
                  email: john.doe@example.com
                  username: johndoe
                  password: SecurePass123!
                  phone: "2065551234"
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      tags:
        - Public Auth
      summary: Login with credentials
      description: |
        Authenticates user and returns JWT token.
        
        **Account Restrictions:**
        - Suspended accounts receive 403 error
        - Locked accounts receive 403 error
        - Unverified accounts can login but have limited access
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              validLogin:
                summary: Valid credentials
                value:
                  email: john.doe@example.com
                  password: SecurePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/password/reset-request:
    post:
      tags:
        - Public Auth
      summary: Request password reset
      description: |
        Sends password reset email if account exists and email is verified.
        
        **Security:** Always returns same message regardless of email existence.
        
        **Token Expiry:** Reset tokens expire in 1 hour.
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Account email address
            examples:
              resetRequest:
                value:
                  email: john.doe@example.com
      responses:
        '200':
          description: Request processed (check email if account exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/password/reset:
    post:
      tags:
        - Public Auth
      summary: Reset password with token
      description: |
        Resets password using token from reset email.
        
        **Token Requirements:**
        - Must be valid JWT token
        - Must have type 'password_reset'
        - Must not be expired (1 hour limit)
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                  description: Reset token from email
                password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  description: New password
            examples:
              validReset:
                value:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  password: NewSecurePass456!
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/verify/carriers:
    get:
      tags:
        - Verification
      summary: Get supported SMS carriers
      description: Returns list of supported carriers for SMS verification via email gateway.
      operationId: getCarriers
      responses:
        '200':
          description: List of carriers
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      carriers:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: att
                            name:
                              type: string
                              example: Att
                            gateway:
                              type: string
                              example: '@txt.att.net'
                      note:
                        type: string

  /auth/verify/email/confirm:
    get:
      tags:
        - Verification
      summary: Verify email via link
      description: |
        Verifies email address using token from verification email.
        
        **Token Requirements:**
        - Must match stored verification token
        - Must not be expired (48 hour limit)
        - Can only be used once
      operationId: confirmEmail
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
          description: Verification token from email
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  # ===== PROTECTED AUTH ENDPOINTS =====
  /jwt_test:
    get:
      tags:
        - Testing
      summary: Test JWT token validity
      description: Validates JWT token and returns success message.
      operationId: testJWT
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Your token is valid
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /auth/user/password/change:
    post:
      tags:
        - Protected Auth
      summary: Change password
      description: |
        Changes user password (requires old password verification).
        
        **Requirements:**
        - Must provide correct old password
        - New password must be different from old
        - Updates account timestamp
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  description: Current password
                newPassword:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  description: New password (must be different)
            examples:
              validChange:
                value:
                  oldPassword: CurrentPass123!
                  newPassword: NewSecurePass456!
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/verify/phone/send:
    post:
      tags:
        - Verification
      summary: Send SMS verification code
      description: |
        Sends 6-digit verification code via SMS (email-to-SMS gateway).
        
        **Rate Limiting:** 1 request per minute
        
        **Code Expiry:** 15 minutes
        
        **Carrier Selection:** Optional carrier parameter for specific gateways
      operationId: sendPhoneVerification
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                carrier:
                  type: string
                  description: Optional carrier ID (att, tmobile, verizon, etc.)
                  example: att
      responses:
        '200':
          description: Verification code sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      expiresIn:
                        type: string
                        example: 15 minutes
                      method:
                        type: string
                        example: email-to-sms
                      availableCarriers:
                        type: array
                        items:
                          type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/verify/phone/verify:
    post:
      tags:
        - Verification
      summary: Verify SMS code
      description: |
        Verifies 6-digit code sent via SMS.
        
        **Attempt Limit:** 3 attempts per code
        
        **Code Requirements:**
        - Must be 6 digits
        - Must not be expired
        - Must match most recent code
      operationId: verifyPhone
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  pattern: '^\d{6}$'
                  description: 6-digit verification code
                  example: "123456"
      responses:
        '200':
          description: Phone verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/verify/email/send:
    post:
      tags:
        - Verification
      summary: Send email verification
      description: |
        Sends verification email with link.
        
        **Rate Limiting:** 1 request per 5 minutes
        
        **Token Expiry:** 48 hours
      operationId: sendEmailVerification
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      expiresIn:
                        type: string
                        example: 48 hours
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/ServerError'

  # ===== ADMIN ENDPOINTS =====
  /admin/users/create:
    post:
      tags:
        - Admin
      summary: Create user with role
      description: |
        Creates new user with specified role.
        
        **Role Restrictions:**
        - Admins can create users with equal or lower roles
        - Cannot create users with higher roles than yourself
        
        **Account Status:** Admin-created accounts start as 'active'
      operationId: adminCreateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateUserRequest'
            examples:
              createModerator:
                summary: Create moderator
                value:
                  firstname: Jane
                  lastname: Smith
                  email: jane.smith@example.com
                  username: janesmith
                  password: SecurePass123!
                  phone: "2065559999"
                  role: 2
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserDetails'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (paginated)
      description: |
        Returns paginated list of users with optional status and role filters.
        
        **Pagination:** Default 20 per page, max 100
        
        **Filtering:** 
        - Optional status filter (active, pending, suspended, locked, deleted)
        - Optional role filter (1-5: User, Moderator, Admin, SuperAdmin, Owner)
        - Filters can be used independently or together (AND logic)
        
        **Filter Examples:**
        - `?status=active` - Only active users
        - `?role=3` - Only admins (role 3)  
        - `?status=active&role=3` - Only active admins
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [active, pending, suspended, locked, deleted]
          description: Filter by account status
        - name: role
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
            enum: [1, 2, 3, 4, 5]
          description: "Filter by user role level: 1=User, 2=Moderator, 3=Admin, 4=SuperAdmin, 5=Owner"
          example: 3
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Retrieved 25 users with filters applied"
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserDetails'
                      pagination:
                        $ref: '#/components/schemas/PaginationMeta'
                      filters:
                        type: object
                        nullable: true
                        properties:
                          status:
                            type: string
                            example: "active"
                          role:
                            type: object
                            properties:
                              level:
                                type: integer
                                example: 3
                              name:
                                type: string
                                example: "Admin"
                        description: Applied filters (null if no filters)
              examples:
                withFilters:
                  summary: Users with status and role filters
                  value:
                    success: true
                    message: "Retrieved 5 users with filters applied"
                    data:
                      users: []
                      pagination:
                        page: 1
                        limit: 20
                        totalUsers: 5
                        totalPages: 1
                      filters:
                        status: "active"
                        role:
                          level: 3
                          name: "Admin"
                noFilters:
                  summary: All users without filters
                  value:
                    success: true
                    message: "Retrieved 150 users"
                    data:
                      users: []
                      pagination:
                        page: 1
                        limit: 20
                        totalUsers: 150
                        totalPages: 8
                      filters: null
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Get user details
      description: Returns detailed information about specific user.
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserDetails'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Admin
      summary: Update user
      description: |
        Updates user account details.
        
        **Role Hierarchy:** Can only modify users with lower roles
        
        **Updatable Fields:** accountStatus, emailVerified, phoneVerified
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accountStatus:
                  type: string
                  enum: [active, pending, suspended, locked]
                  description: New account status
                emailVerified:
                  type: boolean
                  description: Set email verification status
                phoneVerified:
                  type: boolean
                  description: Set phone verification status
            examples:
              suspendUser:
                summary: Suspend user
                value:
                  accountStatus: suspended
              verifyUser:
                summary: Manually verify user
                value:
                  emailVerified: true
                  phoneVerified: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserDetails'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Admin
      summary: Delete user (soft delete)
      description: |
        Soft deletes user by setting status to 'deleted'.
        
        **Role Hierarchy:** Can only delete users with lower roles
        
        **Self-Deletion:** Cannot delete your own account
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users/search:
    get:
      tags:
        - Admin
      summary: Search users
      description: |
        Search users by name, email, or username with pagination.
        
        **Search Features:**
        - Multi-field search across firstname, lastname, username, email
        - Case-insensitive partial matching (ILIKE)
        - Optional field filtering via 'fields' parameter
        - Pagination support (same as user list)
        
        **Field Options:** firstname, lastname, username, email
      operationId: searchUsers
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search term to match against user fields
          example: "john"
        - name: fields
          in: query
          schema:
            type: string
            pattern: "^[a-zA-Z,]+$"
          description: Comma-separated list of fields to search (default all)
          example: "email,username"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Items per page
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: 'Found 5 users matching "john"'
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserDetails'
                      pagination:
                        $ref: '#/components/schemas/PaginationMeta'
                      searchTerm:
                        type: string
                        example: "john"
                      fieldsSearched:
                        type: array
                        items:
                          type: string
                        example: ["firstname", "lastname", "email", "username"]
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users/{id}/password:
    put:
      tags:
        - Admin
      summary: Reset user password
      description: |
        Admin directly sets a new password for any user.
        
        **Role Hierarchy:** Can only reset passwords for users with lower roles
        
        **Security:** 
        - Generates new salt and hash
        - Updates account timestamp
        - Uses same password validation as registration (8-128 chars)
        
        **Use Cases:**
        - Emergency password reset
        - Account recovery
        - Administrative password management
      operationId: adminResetPassword
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
                  maxLength: 128
                  description: New password for the user
                  example: "NewSecurePass456!"
            examples:
              resetPassword:
                summary: Reset user password
                value:
                  password: "NewSecurePass456!"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                success:
                  value:
                    success: true
                    message: "Password reset successfully by admin"
                    data: null
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users/{id}/role:
    put:
      tags:
        - Admin
      summary: Change user role
      description: |
        Change a user's role with strict hierarchy enforcement.
        
        **Role Hierarchy Rules:**
        - Admin (3) and higher can change lower roles up to their own level
        - Only higher roles can demote equal roles (super admin can demote admin, but admin cannot demote admin)
        - Cannot promote to above your own role level (admins can promote to admin level)
        - Cannot change your own role
        - Admin (3) can assign roles 1-3, Super Admin (4) can assign 1-4, etc.
        
        **Role Levels:**
        - 1: User
        - 2: Moderator  
        - 3: Admin
        - 4: SuperAdmin
        - 5: Owner
      operationId: changeUserRole
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: New role level for the user
                  example: 2
            examples:
              promoteToModerator:
                summary: Promote user to moderator
                value:
                  role: 2
              promoteToAdmin:
                summary: Promote moderator to admin
                value:
                  role: 3
              demoteToUser:
                summary: Demote moderator to user
                value:
                  role: 1
      responses:
        '200':
          description: Role changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User role changed from User to Moderator"
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserDetails'
                      previousRole:
                        type: object
                        properties:
                          role:
                            type: string
                            example: "User"
                          roleLevel:
                            type: integer
                            example: 1
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /admin/users/stats/dashboard:
    get:
      tags:
        - Admin
      summary: Get dashboard statistics
      description: Returns aggregate statistics about users for admin dashboard.
      operationId: getDashboardStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      statistics:
                        type: object
                        properties:
                          total_users:
                            type: integer
                            example: 150
                          active_users:
                            type: integer
                            example: 120
                          pending_users:
                            type: integer
                            example: 20
                          suspended_users:
                            type: integer
                            example: 5
                          email_verified:
                            type: integer
                            example: 100
                          phone_verified:
                            type: integer
                            example: 80
                          new_users_week:
                            type: integer
                            example: 10
                          new_users_month:
                            type: integer
                            example: 35
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  # ===== SECURITY SCHEMES =====
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token from login or registration.
        
        Format: `Bearer <token>`
        
        Expiry: 14 days

  # ===== PARAMETERS =====
  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: integer
      description: User ID

  # ===== SCHEMAS =====
  schemas:
    RegisterRequest:
      type: object
      required:
        - firstname
        - lastname
        - email
        - username
        - password
        - phone
      properties:
        firstname:
          type: string
          minLength: 1
          maxLength: 100
          example: John
        lastname:
          type: string
          minLength: 1
          maxLength: 100
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
          example: johndoe
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          example: SecurePass123!
        phone:
          type: string
          pattern: '^\d{10,}$'
          example: "2065551234"

    AdminCreateUserRequest:
      allOf:
        - $ref: '#/components/schemas/RegisterRequest'
        - type: object
          required:
            - role
          properties:
            role:
              type: integer
              minimum: 1
              maximum: 5
              description: User role (1-5)
              example: 2

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          format: password
          example: SecurePass123!

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            accessToken:
              type: string
              description: JWT access token
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            user:
              $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 123
        email:
          type: string
          format: email
          example: john.doe@example.com
        name:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        username:
          type: string
          example: johndoe
        role:
          type: string
          enum: [User, Moderator, Admin, SuperAdmin, Owner]
          example: User
        emailVerified:
          type: boolean
          example: false
        phoneVerified:
          type: boolean
          example: false
        accountStatus:
          type: string
          enum: [pending, active, suspended, locked, deleted]
          example: pending

    UserDetails:
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
            phone:
              type: string
              example: "2065551234"
            roleLevel:
              type: integer
              minimum: 1
              maximum: 5
              example: 1
            createdAt:
              type: string
              format: date-time
              example: '2024-01-15T10:30:00Z'
            updatedAt:
              type: string
              format: date-time
              example: '2024-01-15T10:30:00Z'

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        data:
          type: object
          nullable: true

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        errorCode:
          type: string
          example: AUTH001

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation failed
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: email
              message:
                type: string
                example: Invalid email format

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        totalUsers:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

  # ===== RESPONSES =====
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            noToken:
              value:
                success: false
                message: Auth token is not supplied
                errorCode: AUTH009
            invalidCredentials:
              value:
                success: false
                message: Invalid credentials
                errorCode: AUTH001

    ForbiddenError:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            invalidToken:
              value:
                success: false
                message: Token is not valid
                errorCode: AUTH007
            insufficientRole:
              value:
                success: false
                message: Admin access required
                errorCode: AUTH009
            accountSuspended:
              value:
                success: false
                message: Account is suspended. Please contact support.
                errorCode: AUTH005

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            userNotFound:
              value:
                success: false
                message: User not found
                errorCode: USER001

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            tooManyRequests:
              value:
                success: false
                message: Please wait before requesting again
                errorCode: VRFY006

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            databaseError:
              value:
                success: false
                message: Server error - contact support
                errorCode: SRVR001